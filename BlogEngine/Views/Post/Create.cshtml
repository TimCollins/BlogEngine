@model BlogEngine.Models.Entities.Post

@{
    ViewBag.Title = "Create a new Post";
}

@{Html.RenderPartial("~/Views/Shared/_MainMenu.cshtml", new ViewDataDictionary { { "MenuID", 1 } });}

<div class="container">

    @{Html.RenderPartial("~/Views/Shared/_Header.cshtml");}

    <div class="row">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            <fieldset>
                <legend>Create a Post</legend>

                <div class="editor-label">
                    @Html.LabelFor(model => model.CategoryID)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.CategoryID)
                    @Html.ValidationMessageFor(model => model.CategoryID)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Subject)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Subject)
                    @Html.ValidationMessageFor(model => model.Subject)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Body)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Body, new { @class = "tinymce" })
                    @Html.ValidationMessageFor(model => model.Body)
                </div>
                <p>
                    <input type="submit" value="Create Post" class="btn btn-primary btn-lg" />
                </p>
            </fieldset>
        }
    </div>
    <div>
        @Html.ActionLink("Back to List", "Index", "Home")
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript" src="../../Scripts/tinymce/tinymce.min.js"></script>
<script type="text/javascript">
    tinymce.init({
        mode: "specific_textareas",
        editor_selector: "tinymce",
        encoding: "xml",
        setup: function (editor) {
            editor.on('SaveContent', function (ed) {
                ed.content = ed.content.replace(/&#39/g, "&apos");
            });
        }
    });
</script>
